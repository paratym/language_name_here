enum BetterBool {
	Yeah,
	Nah
}

type NamedStruct = pub (
	is_alive: BetterBool 
);

enum WeveGoneQuantum {
	Mmhmm: bool, # variants can have associated types
	Errrr: (yeah: bool, nah: bool) # types can be declared inline
	Uhuhh: NamedStruct, # named type can be used without nesting
}

enum BetterInteger: u64 { # the variant can be declared explicitly. it must be a numeric primitive. if omitted u8 is assumed
	One,
	Two,
	Four = 4, # variant key can be declared explicitly
	Other: u64 = 0, # variants can be given default values
	Float = 0: f64 = 0
}

const uno = BetterInteger::One;
const zero = BetterInteger::Other::(0);
const fancy_zero = BetterInteger::Float::();
const kitty = WeveGoneQuantum::Uhuhh::(is_alive = BetterBool::Yeah); # struct names can be inferred without nesting
