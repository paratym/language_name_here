type BetterBool = union ( # unions can be declared using the 'union' keyword with a struct
	not_sure: bool,
	probably: bool
);

const nahhh = BetterBool::(not_sure = false); # named unions can be construtcted like a struct with one field
const yep: BetterBool = (probably = true); # the name can be inferred when the type is known

fn inferred_union {
	var heading = (north = 10);
	heading = (east = 20);
	heading = (south = 15);
	heading = (west = 30);
	# heading = (north = 10, east = 15); # error: type of heading cannot be inferred

	# the type of heading is inferred as 
	# union (north: i32, east: i32, south: i32, west: i32)
}

type AStructure = (
	pub *,
	key u16, # the type used for the key can be explicitly set to any integer type
	# one = 1: u32, # the key for a value can be explicitly set
	two: u32 = 2, # variants can be given default values
);

type Onion = union AStructure; # union of a named type
const garlic: union AStructure = (one = 1);
# const red_onion: Onion = garlic; # error: expected value of type 'Onion' found 'union AStructure'
const red_onion = Onion::{garlic}; # can be explicitly cast
